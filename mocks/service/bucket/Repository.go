// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteUnusedBucket provides a mock function with given fields: ctx
func (_m *Repository) DeleteUnusedBucket(ctx context.Context) {
	_m.Called(ctx)
}

// ResetBucket provides a mock function with given fields: ctx, requestValue
func (_m *Repository) ResetBucket(ctx context.Context, requestValue string) bool {
	ret := _m.Called(ctx, requestValue)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, requestValue)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TryGetPermissionInBucket provides a mock function with given fields: ctx, requestValue, limit
func (_m *Repository) TryGetPermissionInBucket(ctx context.Context, requestValue string, limit int) bool {
	ret := _m.Called(ctx, requestValue, limit)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(ctx, requestValue, limit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
