// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// ResetIpBucket provides a mock function with given fields: ctx, ip
func (_m *Service) ResetIpBucket(ctx context.Context, ip string) bool {
	ret := _m.Called(ctx, ip)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ResetLoginBucket provides a mock function with given fields: ctx, login
func (_m *Service) ResetLoginBucket(ctx context.Context, login string) bool {
	ret := _m.Called(ctx, login)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TryGetPermissionInLoginBucket provides a mock function with given fields: ctx, key, limit
func (_m *Service) TryGetPermissionInLoginBucket(ctx context.Context, key string, limit int) bool {
	ret := _m.Called(ctx, key, limit)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(ctx, key, limit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TryGetPermissionInPasswordBucket provides a mock function with given fields: ctx, key, limit
func (_m *Service) TryGetPermissionInPasswordBucket(ctx context.Context, key string, limit int) bool {
	ret := _m.Called(ctx, key, limit)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, int) bool); ok {
		r0 = rf(ctx, key, limit)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
